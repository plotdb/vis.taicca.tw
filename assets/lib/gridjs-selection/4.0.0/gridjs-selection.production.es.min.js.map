{"version":3,"file":"gridjs-selection.production.es.min.js","sources":["../src/rowSelection/store.ts","../src/rowSelection/actions.ts","../src/rowSelection/rowSelection.tsx"],"sourcesContent":["import { BaseStore } from 'gridjs';\nimport { RowSelectionActionsType } from './actions';\n\nexport type RowSelectionStoreState = {\n  rowIds: string[];\n};\n\nexport class RowSelectionStore extends BaseStore<\n  RowSelectionStoreState,\n  RowSelectionActionsType\n> {\n  getInitialState(): RowSelectionStoreState {\n    return { rowIds: [] };\n  }\n\n  handle(type, payload): void {\n    if (type === 'CHECK') {\n      const { ROW_ID } = payload;\n      this.check(ROW_ID);\n    }\n\n    if (type === 'UNCHECK') {\n      const { ROW_ID } = payload;\n      this.uncheck(ROW_ID);\n    }\n  }\n\n  private check(rowId: string): void {\n    // rowId already exists\n    if (this.state.rowIds.indexOf(rowId) > -1) return;\n\n    this.setState({\n      rowIds: [rowId, ...this.state.rowIds],\n    });\n  }\n\n  private uncheck(rowId: string): void {\n    const index = this.state.rowIds.indexOf(rowId);\n\n    // rowId doesn't exist\n    if (index === -1) return;\n\n    const cloned = [...this.state.rowIds];\n    cloned.splice(index, 1);\n\n    this.setState({\n      rowIds: cloned,\n    });\n  }\n}\n","import { BaseActions } from 'gridjs';\n\nexport interface RowSelectionActionsType {\n  CHECK: {\n    ROW_ID: string;\n  };\n\n  UNCHECK: {\n    ROW_ID: string;\n  };\n}\n\nexport class RowSelectionActions extends BaseActions<RowSelectionActionsType> {\n  check(rowId: string): void {\n    this.dispatch('CHECK', {\n      ROW_ID: rowId,\n    });\n  }\n\n  uncheck(rowId: string): void {\n    this.dispatch('UNCHECK', {\n      ROW_ID: rowId,\n    });\n  }\n}\n","import { h } from 'gridjs';\nimport { RowSelectionStore, RowSelectionStoreState } from './store';\nimport { RowSelectionActions } from './actions';\nimport { className } from 'gridjs';\nimport { Row } from 'gridjs';\nimport { PluginBaseComponent, PluginBaseProps } from 'gridjs';\nimport { Cell } from 'gridjs';\n\ninterface RowSelectionState {\n  isChecked: boolean;\n}\n\ninterface RowSelectionProps {\n  // row identifier\n  id: (row: Row) => string;\n  // it's optional because thead doesn't have a row\n  row?: Row;\n  cell?: Cell;\n  store?: RowSelectionStore;\n  selectedClassName?: string;\n  checkboxClassName?: string;\n}\n\nexport class RowSelection extends PluginBaseComponent<\n  RowSelectionProps & PluginBaseProps<RowSelection>,\n  RowSelectionState\n> {\n  private readonly actions: RowSelectionActions;\n  private readonly store: RowSelectionStore;\n  private readonly storeUpdatedFn: (...args) => void;\n\n  private isDataCell = (props): boolean => props.row !== undefined;\n  private getParentTR = (): Element =>\n    this.base &&\n    this.base.parentElement &&\n    (this.base.parentElement.parentElement as Element);\n\n  static defaultProps = {\n    selectedClassName: className('tr', 'selected'),\n    checkboxClassName: className('checkbox'),\n  };\n\n  constructor(\n    props: RowSelectionProps & PluginBaseProps<RowSelection>,\n    context,\n  ) {\n    super(props, context);\n\n    this.state = {\n      isChecked: false,\n    };\n\n    // store/dispatcher is required only if we are rendering a TD (not a TH)\n    if (this.isDataCell(props)) {\n      // create a new store if a global store doesn't exist\n      if (!props.store) {\n        const store = new RowSelectionStore(this.config.dispatcher);\n        this.store = store;\n\n        // to reuse for other checkboxes\n        props.plugin.props.store = store;\n      } else {\n        // restore the existing store\n        this.store = props.store;\n      }\n\n      this.actions = new RowSelectionActions(this.config.dispatcher);\n      this.storeUpdatedFn = this.storeUpdated.bind(this);\n      this.store.on('updated', this.storeUpdatedFn);\n\n      // also mark this checkbox as checked if cell.data is true\n      if (props.cell.data) {\n        this.check();\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    this.store.off('updated', this.storeUpdatedFn);\n  }\n\n  componentDidMount(): void {\n    if (this.store) this.storeUpdated(this.store.state);\n  }\n\n  private storeUpdated(state: RowSelectionStoreState): void {\n    const parent = this.getParentTR();\n\n    if (!parent) return;\n\n    const isChecked = state.rowIds.indexOf(this.props.id(this.props.row)) > -1;\n\n    this.setState({\n      isChecked: isChecked,\n    });\n\n    if (isChecked) {\n      parent.classList.add(this.props.selectedClassName);\n    } else {\n      parent.classList.remove(this.props.selectedClassName);\n    }\n  }\n\n  private check(): void {\n    this.actions.check(this.props.id(this.props.row));\n    this.props.cell.update(true);\n  }\n\n  private uncheck(): void {\n    this.actions.uncheck(this.props.id(this.props.row));\n    this.props.cell.update(false);\n  }\n\n  private toggle(): void {\n    if (this.state.isChecked) {\n      this.uncheck();\n    } else {\n      this.check();\n    }\n  }\n\n  render() {\n    if (this.isDataCell(this.props)) {\n      return (\n        <input\n          type={'checkbox'}\n          checked={this.state.isChecked}\n          onChange={() => this.toggle()}\n          className={this.props.checkboxClassName}\n        />\n      );\n    }\n\n    return null;\n  }\n}\n"],"names":["__extends","RowSelectionStore","rowIds","type","payload","ROW_ID","this","check","uncheck","rowId","state","indexOf","setState","index","cloned","splice","BaseStore","RowSelectionActions","dispatch","BaseActions","props","context","_super","_this","undefined","row","base","parentElement","isChecked","isDataCell","store","config","dispatcher","plugin","actions","storeUpdatedFn","storeUpdated","bind","on","cell","data","RowSelection","off","parent","getParentTR","id","classList","add","selectedClassName","remove","update","h","checked","onChange","toggle","className","checkboxClassName","PluginBaseComponent"],"mappings":"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"}